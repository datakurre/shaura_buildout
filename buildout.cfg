[buildout]
appname = shaura_example
appspotname = myappspotname
appspotversion = 1
parts =
    wrapper
    app.py
    app.yaml
    patches
    test
    omelette
    tags
unzip = true
versions = versions
extensions = mr.developer
auto-checkout = *

[sources]
shaura = git git+ssh://git@github.com/datakurre/shaura.git
shaura_core = git git+ssh://git@github.com/datakurre/shaura_core.git
shaura_json = git git+ssh://git@github.com/datakurre/shaura_json.git
shaura_gae = git git+ssh://git@github.com/datakurre/shaura_gae.git
shaura_example = git git+ssh://git@github.com/datakurre/shaura_example.git

corejet.core = git git+ssh://git@github.com/datakurre/corejet.core.git
corejet.testrunner = git git+ssh://git@github.com/optilude/corejet.testrunner.git
corejet.visualization = git git+ssh://git@github.com/datakurre/corejet.visualization.git
corejet.pivotal = git git+ssh://git@github.com/datakurre/corejet.pivotal.git

[versions]
pyramid = 1.1

[wrapper]
recipe = rod.recipe.appengine
use_setuptools_pkg_resources = True
zip-packages = False
exclude = tests
eggs = shaura_example
###
# For rod.recipe.appengine to work, one must explicitly list all packages,
# which should exist in the appengine environment for pyramid application to
# work
packages =
    chameleon
    mako
    markupsafe
    paste
    pastescript
    ordereddict
    pyramid
    pyramid-zcml
    repoze.lru
    simplejson
    translationstring
    venusian
    zope.component
    zope.configuration
    zope.deprecation
    zope.event
    zope.i18nmessageid
    zope.interface
    zope.schema

    shaura
    shaura-core
    shaura-json
    shaura-gae
    shaura-example
url = http://googleappengine.googlecode.com/files/google_appengine_1.5.4.zip

[app.py]
recipe = z3c.recipe.template
input = ${buildout:directory}/templates/app.py.in
output = ${buildout:parts-directory}/wrapper/app.py

[app.yaml]
recipe = z3c.recipe.template
input = ${buildout:directory}/templates/app.yaml.in
output = ${buildout:parts-directory}/wrapper/app.yaml

[patches]
recipe = collective.recipe.cmd
on_install = true
on_update = true
cmds =
    ###
    # FIXME: pyramid_zcml requires PasteScript and our recipe symlinks its
    # modules under parts/wrapper/paste/script. Unfortunately, when
    # paste.script.command is expects setuptools to find actual PasteScript
    # installed and we get an error. I do not know, how to fix that, so I just
    # comment out those lines on command.py.
    patch -N ${buildout:parts-directory}/wrapper/paste/script/command.py paste.script.command.diff
    ## Hide buildout warnings about "unused" variables
    # ${buildout:appspotname} ${buildout:appspotversion}

[test]
recipe = corejet.testrunner
defaults = ["--auto-color", "--auto-progress"]
extra-paths = ${buildout:parts-directory}/google_appengine
eggs =
    corejet.pivotal
    shaura[test]
    shaura_core[test]
    shaura_json[test]
    shaura_gae[test]
    shaura_example[test]

[omelette]
recipe = collective.recipe.omelette
eggs = ${wrapper:eggs}
ignores = distribute

[tags]
recipe = z3c.recipe.tag:tags
eggs = ${wrapper:eggs}
# bin/tags -v -l Python
